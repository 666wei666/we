
import scala.io.Source

object EnergySystem
{
  // define case class to hold energy data
  case class Energy(hourly: Double, daily: Double, weekly: Double, monthly: Double)

  // read data from file
  def readData(filename: String): List[Energy] = {
    val file = Source.fromFile(filename)
    val data = file.getLines().toList
    file.close()
    data.map(line => {
      val Array(hourly, daily, weekly, monthly) = line.split("\t").map(_.toDouble)
      Energy(hourly, daily, weekly, monthly)
    })
  }

  // define functions to retrieve energy generated by each renewable source
  def getSolarEnergy(): List[Double] = {
    readData("Solar energy.csv").map(_.hourly)
  }

  def getWindEnergy(): List[Double] = {
    readData("Wind energy.csv").map(_.hourly)
  }

  def getHydroEnergy(): List[Double] = {
    readData("Hydro energy.csv").map(_.hourly)
  }

  // define function to collect and store the data related to energy generated by renewable sources
  def collectData(): List[Energy] = {
    val solarData = readData("Solar energy.csv")
    val windData = readData("Wind energy.csv")
    val hydroData = readData("Hydro energy.csv")
    solarData ++ windData ++ hydroData
  }

  // define higher-order function to filter data based on hourly, daily, weekly, or monthly basis
  def filterData(filterType: String)(data: List[Energy]): List[Double] = {
    filterType match {
      case "hourly" => data.map(_.hourly)
      case "daily" => data.map(_.daily)
      case "weekly" => data.map(_.weekly)
      case "monthly" => data.map(_.monthly)
      case _ => throw new IllegalArgumentException("Invalid filter type")
    }
  }

  // define higher-order function to sort data based on a specific sort type
  def sortData(sortType: String)(data: List[Energy]): List[Energy] = {
    sortType match {
      case "hourly" => data.sortBy(_.hourly)
      case "daily" => data.sortBy(_.daily)
      case "weekly" => data.sortBy(_.weekly)
      case "monthly" => data.sortBy(_.monthly)
      case _ => throw new IllegalArgumentException("Invalid sort type")
    }
  }

  // define function to search for specific data stored in the system
  def searchData(keyword: String): List[Energy] = {
    collectData().filter(e => e.hourly.toString.contains(keyword) ||
      e.daily.toString.contains(keyword) ||
      e.weekly.toString.contains(keyword) ||
      e.monthly.toString.contains(keyword))
  }

  // define function to calculate the mean of a list of data
  def calculateMean(data: List[Double]): Double = {
    data.sum / data.length
  }

  // define function to calculate the median of a list of data
  def calculateMedian(data: List[Double]): Double = {
    val sortedData = data.sorted
    if (sortedData.length % 2 == 0) {
      val mid = sortedData.length / 2
      (sortedData(mid) + sortedData(mid - 1)) / 2
    } else {
      sortedData(sortedData.length / 2)
    }
  }

  // define function to calculate the mode of a list of data
  def calculateMode(data: List[Double]): Option[Double] = {
    val counts = data.groupBy(identity).mapValues(_.size)
    val maxCount = counts.values.max
    counts.find(_._2 == maxCount).map(_._1)
  }

  // define function to calculate the range of a list of data
  def calculateRange(data: List[Double]): Double = {
    data.max - data.min
  }

  // define function to calculate the midrange of a list of data
  def calculateMidRange(data: List[Double]): Double = {
    (data.max + data.min) / 2
  }

  // define function to detect and handle issues with renewable energy sources, generating alerts for the operators accordingly
  def handleIssues(): Unit = {
    // implementation of this function is specific to the requirements of the system and is not provided in the prompt
    // it could involve monitoring data in real-time, comparing with expected values, and generating alerts if issues are detected
  }

  // define function to write the collected data to a file
  def writeToFile(filename: String, data: List[String]): Unit = {
    import java.io._
    val file = new File(filename)
    val bw = new BufferedWriter(new FileWriter(file))
    data.foreach(line => bw.write(line + "\n"))
    bw.close()
  }

  // define function to read the collected data from a file
  def readFromFile(filename: String): List[String] = {
    import scala.io.Source
    val file = Source.fromFile(filename)
    val data = file.getLines().toList
    file.close()
    data
  }

  // define function to calculate the total energy generated by all renewable sources
  def calculateTotalEnergy(data: List[Double]): Double = {
    data.sum
  }

  // define function to calculate the distribution of energy generated by each renewable source
  def calculateEnergyDistribution(data: List[Double]): List[Double] = {
    val total = data.sum
    data.map(_ / total)
  }
}
